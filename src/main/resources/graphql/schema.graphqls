scalar LocalDateTime

type Query {
    polls: [Poll]
}

type Mutation {
    login(data: UserLoginInput): Token
    register(data: UserRegisterInput): Token
    createPoll(poll: PollInput): Poll
}

#----------------------------#
# Inputs
#----------------------------#
input PollInput {
    question: String!
    expiresAt: LocalDateTime!
}

input UserLoginInput {
    email: String!
    password: String!
}

input UserRegisterInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
}
# end of inputs

#----------------------------#
# Special types
#----------------------------#
type Token {
    accessToken: String!
    refreshToken: String!
}
# end of special types

#----------------------------#
# Types
#----------------------------#
type Poll {
    id: ID!
    question: String!
    createdAt: LocalDateTime
    expiresAt: LocalDateTime!
    creator: User
    pollAnswers: [PollAnswer]
    votes: [Vote]
}

type PollAnswer {
    id: ID!
    answer: String!
}

type Role {
    id: ID!
    name: String!
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    role: Role
    polls: [Poll]
    votes: [Vote]
}

type Vote {
    id: ID!
    castedAt: LocalDateTime
    poll: Poll
    answer: PollAnswer
    voter: User
}
# end of types
